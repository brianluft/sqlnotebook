using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Tests;

// Update this with ps1/Update-Tests.ps1. Do not edit manually.
public sealed partial class ScriptTest {
    [TestMethod] public void Test_EXECUTE_implicitly_using_default_value_sql() => TestScript(@"EXECUTE implicitly using default value.sql");
    [TestMethod] public void Test_EXECUTE_one_explicit__one_default_argument_sql() => TestScript(@"EXECUTE one explicit, one default argument.sql");
    [TestMethod] public void Test_EXECUTE_simple_sql() => TestScript(@"EXECUTE simple.sql");
    [TestMethod] public void Test_EXECUTE_using_EXEC_shorthand_sql() => TestScript(@"EXECUTE using EXEC shorthand.sql");
    [TestMethod] public void Test_EXECUTE_with_DEFAULT_keyword_sql() => TestScript(@"EXECUTE with DEFAULT keyword.sql");
    [TestMethod] public void Test_EXECUTE_with_one_argument_sql() => TestScript(@"EXECUTE with one argument.sql");
    [TestMethod] public void Test_EXECUTE_with_quoted_script_name_sql() => TestScript(@"EXECUTE with quoted script name.sql");
    [TestMethod] public void Test_EXECUTE_with_return_value_sql() => TestScript(@"EXECUTE with return value.sql");
    [TestMethod] public void Test_EXPORT_TXT_append_sql() => TestScript(@"EXPORT TXT append.sql");
    [TestMethod] public void Test_EXPORT_TXT_Shift_JIS_sql() => TestScript(@"EXPORT TXT Shift-JIS.sql");
    [TestMethod] public void Test_EXPORT_TXT_truncate_sql() => TestScript(@"EXPORT TXT truncate.sql");
    [TestMethod] public void Test_EXPORT_TXT_sql() => TestScript(@"EXPORT TXT.sql");
    [TestMethod] public void Test_GETDATE_sql() => TestScript(@"GETDATE.sql");
    [TestMethod] public void Test_GETUTCDATE_sql() => TestScript(@"GETUTCDATE.sql");
    [TestMethod] public void Test_HOST_NAME_sql() => TestScript(@"HOST_NAME.sql");
    [TestMethod] public void Test_IMPORT_CSV_FILE_ENCODING_sql() => TestScript(@"IMPORT CSV FILE_ENCODING.sql");
    [TestMethod] public void Test_IMPORT_CSV_HEADER_ROW_sql() => TestScript(@"IMPORT CSV HEADER_ROW.sql");
    [TestMethod] public void Test_IMPORT_CSV_IF_CONVERSION_FAILS_sql() => TestScript(@"IMPORT CSV IF_CONVERSION_FAILS.sql");
    [TestMethod] public void Test_IMPORT_CSV_SKIP_LINES_sql() => TestScript(@"IMPORT CSV SKIP_LINES.sql");
    [TestMethod] public void Test_IMPORT_CSV_TAKE_LINES_sql() => TestScript(@"IMPORT CSV TAKE_LINES.sql");
    [TestMethod] public void Test_IMPORT_CSV_TEMPORARY_TABLE_sql() => TestScript(@"IMPORT CSV TEMPORARY_TABLE.sql");
    [TestMethod] public void Test_IMPORT_CSV_TRUNCATE_EXISTING_TABLE_sql() => TestScript(@"IMPORT CSV TRUNCATE_EXISTING_TABLE.sql");
    [TestMethod] public void Test_IMPORT_TEXT_sql() => TestScript(@"IMPORT TEXT.sql");
    [TestMethod] public void Test_IMPORT_TXT_FILE_ENCODING_sql() => TestScript(@"IMPORT TXT FILE_ENCODING.sql");
    [TestMethod] public void Test_IMPORT_TXT_SKIP_LINES_sql() => TestScript(@"IMPORT TXT SKIP_LINES.sql");
    [TestMethod] public void Test_IMPORT_TXT_TAKE_LINES_sql() => TestScript(@"IMPORT TXT TAKE_LINES.sql");
    [TestMethod] public void Test_IMPORT_TXT_TEMPORARY_TABLE_sql() => TestScript(@"IMPORT TXT TEMPORARY_TABLE.sql");
    [TestMethod] public void Test_IMPORT_TXT_TRUNCATE_EXISTING_TABLE_sql() => TestScript(@"IMPORT TXT TRUNCATE_EXISTING_TABLE.sql");
    [TestMethod] public void Test_IMPORT_XLS_FIRST_COLUMN_first_and_last__letter_sql() => TestScript(@"IMPORT XLS FIRST_COLUMN first and last, letter.sql");
    [TestMethod] public void Test_IMPORT_XLS_FIRST_COLUMN_first_and_last__number_sql() => TestScript(@"IMPORT XLS FIRST_COLUMN first and last, number.sql");
    [TestMethod] public void Test_IMPORT_XLS_FIRST_COLUMN_first_beyond_end_of_data_sql() => TestScript(@"IMPORT XLS FIRST_COLUMN first beyond end of data.sql");
    [TestMethod] public void Test_IMPORT_XLS_FIRST_COLUMN_first_column_only__letter_sql() => TestScript(@"IMPORT XLS FIRST_COLUMN first column only, letter.sql");
    [TestMethod] public void Test_IMPORT_XLS_FIRST_COLUMN_first_column_only__number_sql() => TestScript(@"IMPORT XLS FIRST_COLUMN first column only, number.sql");
    [TestMethod] public void Test_IMPORT_XLS_FIRST_COLUMN_no_column_range_sql() => TestScript(@"IMPORT XLS FIRST_COLUMN no column range.sql");
    [TestMethod] public void Test_IMPORT_XLS_FIRST_ROW_sql() => TestScript(@"IMPORT XLS FIRST_ROW.sql");
    [TestMethod] public void Test_IMPORT_XLS_HEADER_ROW_sql() => TestScript(@"IMPORT XLS HEADER_ROW.sql");
    [TestMethod] public void Test_IMPORT_XLS_IF_CONVERSION_FAILS_sql() => TestScript(@"IMPORT XLS IF_CONVERSION_FAILS.sql");
    [TestMethod] public void Test_IMPORT_XLS_LAST_COLUMN_0__all_columns_sql() => TestScript(@"IMPORT XLS LAST_COLUMN 0, all columns.sql");
    [TestMethod] public void Test_IMPORT_XLS_LAST_COLUMN_last_beyond_end_of_data_sql() => TestScript(@"IMPORT XLS LAST_COLUMN last beyond end of data.sql");
    [TestMethod] public void Test_IMPORT_XLS_LAST_COLUMN_last_column_only_sql() => TestScript(@"IMPORT XLS LAST_COLUMN last column only.sql");
    [TestMethod] public void Test_IMPORT_XLS_LAST_ROW_sql() => TestScript(@"IMPORT XLS LAST_ROW.sql");
    [TestMethod] public void Test_IMPORT_XLS_TEMPORARY_TABLE_sql() => TestScript(@"IMPORT XLS TEMPORARY_TABLE.sql");
    [TestMethod] public void Test_IMPORT_XLS_TRUNCATE_EXISTING_TABLE_sql() => TestScript(@"IMPORT XLS TRUNCATE_EXISTING_TABLE.sql");
    [TestMethod] public void Test_IMPORT_XLS_sql() => TestScript(@"IMPORT XLS.sql");
    [TestMethod] public void Test_LIST_FILES_sql() => TestScript(@"LIST_FILES.sql");
    [TestMethod] public void Test_NEWID_sql() => TestScript(@"NEWID.sql");
    [TestMethod] public void Test_NOW_sql() => TestScript(@"NOW.sql");
    [TestMethod] public void Test_READ_CSV_sql() => TestScript(@"READ_CSV.sql");
    [TestMethod] public void Test_READ_FILE_sql() => TestScript(@"READ_FILE.sql");
    [TestMethod] public void Test_READ_FILE_TEXT_sql() => TestScript(@"READ_FILE_TEXT.sql");
    [TestMethod] public void Test_RETURN_from_EXECUTE_sql() => TestScript(@"RETURN from EXECUTE.sql");
    [TestMethod] public void Test_RETURN_with_value_sql() => TestScript(@"RETURN with value.sql");
    [TestMethod] public void Test_RETURN_sql() => TestScript(@"RETURN.sql");
    [TestMethod] public void Test_THROW_from_sub_script_sql() => TestScript(@"THROW from sub-script.sql");
    [TestMethod] public void Test_THROW_rethrow_sql() => TestScript(@"THROW rethrow.sql");
    [TestMethod] public void Test_THROW_sql() => TestScript(@"THROW.sql");
    [TestMethod] public void Test_TO_DATETIMEOFFSET_sql() => TestScript(@"TO_DATETIMEOFFSET.sql");
    [TestMethod] public void Test_USER_NAME_sql() => TestScript(@"USER_NAME.sql");
    [TestMethod] public void Test_doc_array_append_func_sql() => TestScript(@"doc\array-append-func.sql");
    [TestMethod] public void Test_doc_array_concat_func_sql() => TestScript(@"doc\array-concat-func.sql");
    [TestMethod] public void Test_doc_array_count_func_sql() => TestScript(@"doc\array-count-func.sql");
    [TestMethod] public void Test_doc_array_func_sql() => TestScript(@"doc\array-func.sql");
    [TestMethod] public void Test_doc_array_get_func_sql() => TestScript(@"doc\array-get-func.sql");
    [TestMethod] public void Test_doc_array_insert_func_sql() => TestScript(@"doc\array-insert-func.sql");
    [TestMethod] public void Test_doc_array_merge_func_sql() => TestScript(@"doc\array-merge-func.sql");
    [TestMethod] public void Test_doc_array_set_func_sql() => TestScript(@"doc\array-set-func.sql");
    [TestMethod] public void Test_doc_break_stmt_sql() => TestScript(@"doc\break-stmt.sql");
    [TestMethod] public void Test_doc_choose_func_sql() => TestScript(@"doc\choose-func.sql");
    [TestMethod] public void Test_doc_continue_stmt_sql() => TestScript(@"doc\continue-stmt.sql");
    [TestMethod] public void Test_doc_date_add_func_sql() => TestScript(@"doc\date-add-func.sql");
    [TestMethod] public void Test_doc_date_diff_func_sql() => TestScript(@"doc\date-diff-func.sql");
    [TestMethod] public void Test_doc_date_from_parts_func_sql() => TestScript(@"doc\date-from-parts-func.sql");
    [TestMethod] public void Test_doc_date_name_func_sql() => TestScript(@"doc\date-name-func.sql");
    [TestMethod] public void Test_doc_date_part_func_sql() => TestScript(@"doc\date-part-func.sql");
    [TestMethod] public void Test_doc_date_time_from_parts_func_sql() => TestScript(@"doc\date-time-from-parts-func.sql");
    [TestMethod] public void Test_doc_date_time_offset_from_parts_func_sql() => TestScript(@"doc\date-time-offset-from-parts-func.sql");
    [TestMethod] public void Test_doc_date_trunc_func_sql() => TestScript(@"doc\date-trunc-func.sql");
    [TestMethod] public void Test_doc_day_func_sql() => TestScript(@"doc\day-func.sql");
    [TestMethod] public void Test_doc_declare_stmt_sql() => TestScript(@"doc\declare-stmt.sql");
    [TestMethod] public void Test_doc_download_func_sql() => TestScript(@"doc\download-func.sql");
    [TestMethod] public void Test_doc_eomonth_func_sql() => TestScript(@"doc\eomonth-func.sql");
    [TestMethod] public void Test_doc_error_message_func_sql() => TestScript(@"doc\error-message-func.sql");
    [TestMethod] public void Test_doc_for_stmt_sql() => TestScript(@"doc\for-stmt.sql");
    [TestMethod] public void Test_doc_if_stmt_sql() => TestScript(@"doc\if-stmt.sql");
    [TestMethod] public void Test_doc_import_csv_stmt_sql() => TestScript(@"doc\import-csv-stmt.sql");
    [TestMethod] public void Test_doc_import_txt_stmt_sql() => TestScript(@"doc\import-txt-stmt.sql");
    [TestMethod] public void Test_doc_integer_range_func_sql() => TestScript(@"doc\integer-range-func.sql");
    [TestMethod] public void Test_doc_is_date_func_sql() => TestScript(@"doc\is-date-func.sql");
    [TestMethod] public void Test_doc_is_numeric_func_sql() => TestScript(@"doc\is-numeric-func.sql");
    [TestMethod] public void Test_doc_list_xls_worksheets_func_sql() => TestScript(@"doc\list-xls-worksheets-func.sql");
    [TestMethod] public void Test_doc_math_funcs_sql() => TestScript(@"doc\math-funcs.sql");
    [TestMethod] public void Test_doc_month_func_sql() => TestScript(@"doc\month-func.sql");
    [TestMethod] public void Test_doc_print_stmt_sql() => TestScript(@"doc\print-stmt.sql");
    [TestMethod] public void Test_doc_set_stmt_sql() => TestScript(@"doc\set-stmt.sql");
    [TestMethod] public void Test_doc_split_func_sql() => TestScript(@"doc\split-func.sql");
    [TestMethod] public void Test_doc_switch_offset_func_sql() => TestScript(@"doc\switch-offset-func.sql");
    [TestMethod] public void Test_doc_to_date_func_sql() => TestScript(@"doc\to-date-func.sql");
    [TestMethod] public void Test_doc_to_date_time_func_sql() => TestScript(@"doc\to-date-time-func.sql");
    [TestMethod] public void Test_doc_try_catch_stmt_sql() => TestScript(@"doc\try-catch-stmt.sql");
    [TestMethod] public void Test_doc_while_stmt_sql() => TestScript(@"doc\while-stmt.sql");
    [TestMethod] public void Test_doc_year_func_sql() => TestScript(@"doc\year-func.sql");
}
